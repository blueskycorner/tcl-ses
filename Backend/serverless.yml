# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tcl-ses # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
    - Effect: "Allow"
      Action:
        - s3:GetObject
      Resource: arn:aws:s3:::${self:custom.tclBucketName}-${self:provider.stage}/*
    - Effect: "Allow"
      Action:
        - rekognition:DetectText
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - !Ref ErrorSNS

custom:
  tclBucketName: hardis-tcl-invoices
  tclCardObjectKey: CarteTCL.jpg
  accountableEmail: benjamin.ehlers@hardis.fr

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  sendTclInvoice:
    handler: handler.sendTclInvoice

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - s3:
          bucket: ${self:custom.tclBucketName}-${self:provider.stage}
          event: s3:ObjectCreated:*
          rules:
            - prefix: invoices/
            - suffix: .jpg

#    Define function environment variables here
    environment:
      emailFrom:
        Fn::FindInMap:
        - envValues
        - ${self:provider.stage}
        - emailFrom
      emailTo:
        Fn::FindInMap:
        - envValues
        - ${self:provider.stage}
        - emailTo
      emailCc:
        Fn::FindInMap:
        - envValues
        - ${self:provider.stage}
        - emailCc
      tclCardObjectKey: ${self:custom.tclCardObjectKey}
      prefix: '/tmp/'
      errorTopicArn: !Ref ErrorSNS

# you can add CloudFormation resource templates here
resources:
  Mappings:
    envValues:
      dev:
        emailFrom: benjamin.ehlers@hardis.fr
        emailTo: benjamin.ehlers@hardis.fr
        emailCc: ehlers.benjamin@free.fr
      prod:
        emailFrom: benjamin.ehlers@hardis.fr
        emailTo: rhpaie@hardis.fr
        emailCc: benjamin.ehlers@hardis.fr
  Resources:
    ErrorSNS:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: tclError
        Subscription:
        - Endpoint: ${self:custom.accountableEmail}
          Protocol: email
        TopicName: tclError
  Outputs:
    ErrorSNSOut:
      Description: SNS topic for error
      Value: !Ref ErrorSNS
